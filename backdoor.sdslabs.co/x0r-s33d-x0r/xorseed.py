cip = 379845863447890655076514644645506557288570889375725446579356004699167510328669785426992679934578509771535332382434588248020429292962057919681344747592764571145334319524952182538336890517255413018566743420444112616086691605504433026756440160054875325674557613073844061255390038954570883169357318491297937427616406371265653775589758546829959892650662239714435693111480135385626095631617554837183361818000947904906884868486155460078466695300337774343620318869917149909439139900092528672293316281596300224192216611570636247832647922437494462551805965511095254802786688977603364948965999010875840204318605815894018729669701453105918625790271604869232420167546885154525393352835714250856643762172033658585975877138061851755067004784512864737720716237767913649814510780319445172618870023929175903290738321351502020361926528935830598681430268666024843183350241547169199655614045989568929272061505284855979833224364428799531478722468258896201615430655099930550710287020336
hex_cip = hex(cip)
binary = hex_cip[2:-1].decode('hex')

n = len(binary)/8
import random
def rand_func(a,d):
    random.seed(d)
    b = []
    for i in range(1,a+1):
        b.append((random.randint(1,1000))^i)
    return b

def xor(a,d):
    b = ""
    for i in range(n):
        s = rand_func(50,d)
        b += chr((int(a[8*i:8*i+8], 2)^d^s[i])%256)
        d += 1
    return b

def find_seed(a):
	b = ''
	for i in range(1001):
		s = rand_func(n, i)
		b = str(chr((int(a[0:8], 2)^(i)^s[0])%256))
		s = rand_func(n, i+1)
		b += str(chr((int(a[8:16], 2)^(i+1)^s[1])%256))
		s = rand_func(n, i+2)
		b += str(chr((int(a[16:24], 2)^(i+2)^s[2])%256))
		if b =='CTF':
			return i
		
print xor(binary, find_seed(binary))